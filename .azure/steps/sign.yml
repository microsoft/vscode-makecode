parameters:
  - name: signType
    type: string

steps:
- task: UseDotNet@2
  displayName: "Install dotnet SDK"
  inputs:
    packageType: "sdk"
    version: "6.0.x"

# Need this to run signing plugins
- task: UseDotNet@2
  displayName: "Install dotnet 3.1.0 SDK"
  inputs:
    packageType: "sdk"
    version: "3.1.x"

- task: NuGetAuthenticate@0
- task: MicroBuildSigningPlugin@4
  displayName: "Install Signing Plugin"
  inputs:
    signType: ${{ parameters.signType }}
    azureSubscription: "MicroBuild Signing Task (DevDiv)"
    feedSource: "https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json"
  env:
    TeamName: "$(TeamName)"

- script: npx @vscode/vsce@latest generate-manifest -i $(SetExtensionName.VSIX) -o $(SetExtensionName.VSIX).manifest
  displayName: 'Generate extension manifest'
  workingDirectory: $(Build.ArtifactStagingDirectory)

- script: cp $(SetExtensionName.VSIX).manifest $(SetExtensionName.VSIX).signature.p7s
  displayName: 'Prepare manifest for signing'
  workingDirectory: $(Build.ArtifactStagingDirectory)

- script: |
    cat <<EOT >> signfilelist-extension.xml
    <?xml version="1.0" encoding="utf-8" ?>
    <!--
    This file is used by the public release pipelines to specify the files to be signed and the certificate to be used.
    For the cert number used, see https://dev.azure.com/devdiv/DevDiv/_wiki/wikis/DevDiv.wiki/658/Signing-Cert-Guidance
    -->
    <filelist>
      <certificate certnumbers="4014052">
        <file srcpath="$(Build.ArtifactStagingDirectory)/$(SetExtensionName.VSIX).signature.p7s"></file>
      </certificate>
    </filelist>
    EOT
  displayName: "Create the signfilelist"

# Sign Files
- powershell: |
    dotnet (get-item $(Build.ArtifactStagingDirectory)/MicroBuild/Plugins/MicroBuild.Plugins.Signing.*/build/DDSignFiles.dll).FullName -- /filelist:signfilelist-extension.xml
  displayName: "Sign VSIX"

# Clean up MicroBuild
- task: MicroBuildCleanup@1

- powershell: |
    Remove-Item -Recurse -Force $(Build.ArtifactStagingDirectory)/MicroBuild
  displayName: "Clean up MicroBuild folder"

- task: 1ES.PublishPipelineArtifact@1
  inputs:
    path: $(Build.ArtifactStagingDirectory)/$(SetExtensionName.VSIX).manifest
    artifact: extension-manifest
    sbomBuildDropPath: $(Build.ArtifactStagingDirectory)

- task: 1ES.PublishPipelineArtifact@1
  inputs:
    path: $(Build.ArtifactStagingDirectory)/$(SetExtensionName.VSIX).signature.p7s
    artifact: extension-signature
    sbomBuildDropPath: $(Build.ArtifactStagingDirectory)